// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spaceart.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_spaceart_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_spaceart_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_spaceart_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_spaceart_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_spaceart_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_spaceart_2eproto_metadata_getter(int index);
namespace spaceart {
class Account;
struct AccountDefaultTypeInternal;
extern AccountDefaultTypeInternal _Account_default_instance_;
class ArtLine;
struct ArtLineDefaultTypeInternal;
extern ArtLineDefaultTypeInternal _ArtLine_default_instance_;
class ArtRequest;
struct ArtRequestDefaultTypeInternal;
extern ArtRequestDefaultTypeInternal _ArtRequest_default_instance_;
class AuthResponse;
struct AuthResponseDefaultTypeInternal;
extern AuthResponseDefaultTypeInternal _AuthResponse_default_instance_;
class CheckInResponse;
struct CheckInResponseDefaultTypeInternal;
extern CheckInResponseDefaultTypeInternal _CheckInResponse_default_instance_;
class PresentationLine;
struct PresentationLineDefaultTypeInternal;
extern PresentationLineDefaultTypeInternal _PresentationLine_default_instance_;
class PresentationToken;
struct PresentationTokenDefaultTypeInternal;
extern PresentationTokenDefaultTypeInternal _PresentationToken_default_instance_;
}  // namespace spaceart
PROTOBUF_NAMESPACE_OPEN
template<> ::spaceart::Account* Arena::CreateMaybeMessage<::spaceart::Account>(Arena*);
template<> ::spaceart::ArtLine* Arena::CreateMaybeMessage<::spaceart::ArtLine>(Arena*);
template<> ::spaceart::ArtRequest* Arena::CreateMaybeMessage<::spaceart::ArtRequest>(Arena*);
template<> ::spaceart::AuthResponse* Arena::CreateMaybeMessage<::spaceart::AuthResponse>(Arena*);
template<> ::spaceart::CheckInResponse* Arena::CreateMaybeMessage<::spaceart::CheckInResponse>(Arena*);
template<> ::spaceart::PresentationLine* Arena::CreateMaybeMessage<::spaceart::PresentationLine>(Arena*);
template<> ::spaceart::PresentationToken* Arena::CreateMaybeMessage<::spaceart::PresentationToken>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace spaceart {

// ===================================================================

class Account PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceart.Account) */ {
 public:
  inline Account() : Account(nullptr) {}
  virtual ~Account();
  explicit constexpr Account(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Account(const Account& from);
  Account(Account&& from) noexcept
    : Account() {
    *this = ::std::move(from);
  }

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }
  inline Account& operator=(Account&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Account& default_instance() {
    return *internal_default_instance();
  }
  static inline const Account* internal_default_instance() {
    return reinterpret_cast<const Account*>(
               &_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Account& a, Account& b) {
    a.Swap(&b);
  }
  inline void Swap(Account* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Account* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Account* New() const final {
    return CreateMaybeMessage<Account>(nullptr);
  }

  Account* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Account>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Account& from);
  void MergeFrom(const Account& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Account* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceart.Account";
  }
  protected:
  explicit Account(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_spaceart_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:spaceart.Account)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  friend struct ::TableStruct_spaceart_2eproto;
};
// -------------------------------------------------------------------

class PresentationToken PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceart.PresentationToken) */ {
 public:
  inline PresentationToken() : PresentationToken(nullptr) {}
  virtual ~PresentationToken();
  explicit constexpr PresentationToken(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PresentationToken(const PresentationToken& from);
  PresentationToken(PresentationToken&& from) noexcept
    : PresentationToken() {
    *this = ::std::move(from);
  }

  inline PresentationToken& operator=(const PresentationToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline PresentationToken& operator=(PresentationToken&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PresentationToken& default_instance() {
    return *internal_default_instance();
  }
  static inline const PresentationToken* internal_default_instance() {
    return reinterpret_cast<const PresentationToken*>(
               &_PresentationToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PresentationToken& a, PresentationToken& b) {
    a.Swap(&b);
  }
  inline void Swap(PresentationToken* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PresentationToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PresentationToken* New() const final {
    return CreateMaybeMessage<PresentationToken>(nullptr);
  }

  PresentationToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PresentationToken>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PresentationToken& from);
  void MergeFrom(const PresentationToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PresentationToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceart.PresentationToken";
  }
  protected:
  explicit PresentationToken(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_spaceart_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:spaceart.PresentationToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceart_2eproto;
};
// -------------------------------------------------------------------

class PresentationLine PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceart.PresentationLine) */ {
 public:
  inline PresentationLine() : PresentationLine(nullptr) {}
  virtual ~PresentationLine();
  explicit constexpr PresentationLine(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PresentationLine(const PresentationLine& from);
  PresentationLine(PresentationLine&& from) noexcept
    : PresentationLine() {
    *this = ::std::move(from);
  }

  inline PresentationLine& operator=(const PresentationLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline PresentationLine& operator=(PresentationLine&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PresentationLine& default_instance() {
    return *internal_default_instance();
  }
  static inline const PresentationLine* internal_default_instance() {
    return reinterpret_cast<const PresentationLine*>(
               &_PresentationLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PresentationLine& a, PresentationLine& b) {
    a.Swap(&b);
  }
  inline void Swap(PresentationLine* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PresentationLine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PresentationLine* New() const final {
    return CreateMaybeMessage<PresentationLine>(nullptr);
  }

  PresentationLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PresentationLine>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PresentationLine& from);
  void MergeFrom(const PresentationLine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PresentationLine* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceart.PresentationLine";
  }
  protected:
  explicit PresentationLine(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_spaceart_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLineFieldNumber = 1,
  };
  // string line = 1;
  void clear_line();
  const std::string& line() const;
  void set_line(const std::string& value);
  void set_line(std::string&& value);
  void set_line(const char* value);
  void set_line(const char* value, size_t size);
  std::string* mutable_line();
  std::string* release_line();
  void set_allocated_line(std::string* line);
  private:
  const std::string& _internal_line() const;
  void _internal_set_line(const std::string& value);
  std::string* _internal_mutable_line();
  public:

  // @@protoc_insertion_point(class_scope:spaceart.PresentationLine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr line_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceart_2eproto;
};
// -------------------------------------------------------------------

class CheckInResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceart.CheckInResponse) */ {
 public:
  inline CheckInResponse() : CheckInResponse(nullptr) {}
  virtual ~CheckInResponse();
  explicit constexpr CheckInResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckInResponse(const CheckInResponse& from);
  CheckInResponse(CheckInResponse&& from) noexcept
    : CheckInResponse() {
    *this = ::std::move(from);
  }

  inline CheckInResponse& operator=(const CheckInResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckInResponse& operator=(CheckInResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckInResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckInResponse* internal_default_instance() {
    return reinterpret_cast<const CheckInResponse*>(
               &_CheckInResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CheckInResponse& a, CheckInResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckInResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckInResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckInResponse* New() const final {
    return CreateMaybeMessage<CheckInResponse>(nullptr);
  }

  CheckInResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckInResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckInResponse& from);
  void MergeFrom(const CheckInResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckInResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceart.CheckInResponse";
  }
  protected:
  explicit CheckInResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_spaceart_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 4,
    kValidFieldNumber = 1,
    kWrongPasswordFieldNumber = 2,
    kNewPasswordDesiredFieldNumber = 3,
  };
  // string token = 4;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // bool valid = 1;
  void clear_valid();
  bool valid() const;
  void set_valid(bool value);
  private:
  bool _internal_valid() const;
  void _internal_set_valid(bool value);
  public:

  // bool wrong_password = 2;
  bool has_wrong_password() const;
  private:
  bool _internal_has_wrong_password() const;
  public:
  void clear_wrong_password();
  bool wrong_password() const;
  void set_wrong_password(bool value);
  private:
  bool _internal_wrong_password() const;
  void _internal_set_wrong_password(bool value);
  public:

  // bool new_password_desired = 3;
  bool has_new_password_desired() const;
  private:
  bool _internal_has_new_password_desired() const;
  public:
  void clear_new_password_desired();
  bool new_password_desired() const;
  void set_new_password_desired(bool value);
  private:
  bool _internal_new_password_desired() const;
  void _internal_set_new_password_desired(bool value);
  public:

  // @@protoc_insertion_point(class_scope:spaceart.CheckInResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  bool valid_;
  bool wrong_password_;
  bool new_password_desired_;
  friend struct ::TableStruct_spaceart_2eproto;
};
// -------------------------------------------------------------------

class AuthResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceart.AuthResponse) */ {
 public:
  inline AuthResponse() : AuthResponse(nullptr) {}
  virtual ~AuthResponse();
  explicit constexpr AuthResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthResponse(const AuthResponse& from);
  AuthResponse(AuthResponse&& from) noexcept
    : AuthResponse() {
    *this = ::std::move(from);
  }

  inline AuthResponse& operator=(const AuthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthResponse& operator=(AuthResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthResponse* internal_default_instance() {
    return reinterpret_cast<const AuthResponse*>(
               &_AuthResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AuthResponse& a, AuthResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthResponse* New() const final {
    return CreateMaybeMessage<AuthResponse>(nullptr);
  }

  AuthResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthResponse& from);
  void MergeFrom(const AuthResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceart.AuthResponse";
  }
  protected:
  explicit AuthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_spaceart_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidFieldNumber = 1,
    kWrongPasswordFieldNumber = 2,
  };
  // bool valid = 1;
  void clear_valid();
  bool valid() const;
  void set_valid(bool value);
  private:
  bool _internal_valid() const;
  void _internal_set_valid(bool value);
  public:

  // bool wrong_password = 2;
  bool has_wrong_password() const;
  private:
  bool _internal_has_wrong_password() const;
  public:
  void clear_wrong_password();
  bool wrong_password() const;
  void set_wrong_password(bool value);
  private:
  bool _internal_wrong_password() const;
  void _internal_set_wrong_password(bool value);
  public:

  // @@protoc_insertion_point(class_scope:spaceart.AuthResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool valid_;
  bool wrong_password_;
  friend struct ::TableStruct_spaceart_2eproto;
};
// -------------------------------------------------------------------

class ArtRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceart.ArtRequest) */ {
 public:
  inline ArtRequest() : ArtRequest(nullptr) {}
  virtual ~ArtRequest();
  explicit constexpr ArtRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArtRequest(const ArtRequest& from);
  ArtRequest(ArtRequest&& from) noexcept
    : ArtRequest() {
    *this = ::std::move(from);
  }

  inline ArtRequest& operator=(const ArtRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArtRequest& operator=(ArtRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArtRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArtRequest* internal_default_instance() {
    return reinterpret_cast<const ArtRequest*>(
               &_ArtRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ArtRequest& a, ArtRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ArtRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArtRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArtRequest* New() const final {
    return CreateMaybeMessage<ArtRequest>(nullptr);
  }

  ArtRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArtRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArtRequest& from);
  void MergeFrom(const ArtRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArtRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceart.ArtRequest";
  }
  protected:
  explicit ArtRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_spaceart_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:spaceart.ArtRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceart_2eproto;
};
// -------------------------------------------------------------------

class ArtLine PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceart.ArtLine) */ {
 public:
  inline ArtLine() : ArtLine(nullptr) {}
  virtual ~ArtLine();
  explicit constexpr ArtLine(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArtLine(const ArtLine& from);
  ArtLine(ArtLine&& from) noexcept
    : ArtLine() {
    *this = ::std::move(from);
  }

  inline ArtLine& operator=(const ArtLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArtLine& operator=(ArtLine&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArtLine& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArtLine* internal_default_instance() {
    return reinterpret_cast<const ArtLine*>(
               &_ArtLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ArtLine& a, ArtLine& b) {
    a.Swap(&b);
  }
  inline void Swap(ArtLine* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArtLine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArtLine* New() const final {
    return CreateMaybeMessage<ArtLine>(nullptr);
  }

  ArtLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArtLine>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArtLine& from);
  void MergeFrom(const ArtLine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArtLine* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceart.ArtLine";
  }
  protected:
  explicit ArtLine(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_spaceart_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLineFieldNumber = 1,
  };
  // string line = 1;
  void clear_line();
  const std::string& line() const;
  void set_line(const std::string& value);
  void set_line(std::string&& value);
  void set_line(const char* value);
  void set_line(const char* value, size_t size);
  std::string* mutable_line();
  std::string* release_line();
  void set_allocated_line(std::string* line);
  private:
  const std::string& _internal_line() const;
  void _internal_set_line(const std::string& value);
  std::string* _internal_mutable_line();
  public:

  // @@protoc_insertion_point(class_scope:spaceart.ArtLine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr line_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceart_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Account

// string username = 1;
inline void Account::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& Account::username() const {
  // @@protoc_insertion_point(field_get:spaceart.Account.username)
  return _internal_username();
}
inline void Account::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:spaceart.Account.username)
}
inline std::string* Account::mutable_username() {
  // @@protoc_insertion_point(field_mutable:spaceart.Account.username)
  return _internal_mutable_username();
}
inline const std::string& Account::_internal_username() const {
  return username_.Get();
}
inline void Account::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Account::set_username(std::string&& value) {
  
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:spaceart.Account.username)
}
inline void Account::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:spaceart.Account.username)
}
inline void Account::set_username(const char* value,
    size_t size) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:spaceart.Account.username)
}
inline std::string* Account::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Account::release_username() {
  // @@protoc_insertion_point(field_release:spaceart.Account.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:spaceart.Account.username)
}

// string password = 2;
inline bool Account::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Account::has_password() const {
  return _internal_has_password();
}
inline void Account::clear_password() {
  password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Account::password() const {
  // @@protoc_insertion_point(field_get:spaceart.Account.password)
  return _internal_password();
}
inline void Account::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:spaceart.Account.password)
}
inline std::string* Account::mutable_password() {
  // @@protoc_insertion_point(field_mutable:spaceart.Account.password)
  return _internal_mutable_password();
}
inline const std::string& Account::_internal_password() const {
  return password_.Get();
}
inline void Account::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Account::set_password(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:spaceart.Account.password)
}
inline void Account::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:spaceart.Account.password)
}
inline void Account::set_password(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:spaceart.Account.password)
}
inline std::string* Account::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000001u;
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Account::release_password() {
  // @@protoc_insertion_point(field_release:spaceart.Account.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:spaceart.Account.password)
}

// -------------------------------------------------------------------

// PresentationToken

// string token = 1;
inline void PresentationToken::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& PresentationToken::token() const {
  // @@protoc_insertion_point(field_get:spaceart.PresentationToken.token)
  return _internal_token();
}
inline void PresentationToken::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:spaceart.PresentationToken.token)
}
inline std::string* PresentationToken::mutable_token() {
  // @@protoc_insertion_point(field_mutable:spaceart.PresentationToken.token)
  return _internal_mutable_token();
}
inline const std::string& PresentationToken::_internal_token() const {
  return token_.Get();
}
inline void PresentationToken::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PresentationToken::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:spaceart.PresentationToken.token)
}
inline void PresentationToken::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:spaceart.PresentationToken.token)
}
inline void PresentationToken::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:spaceart.PresentationToken.token)
}
inline std::string* PresentationToken::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PresentationToken::release_token() {
  // @@protoc_insertion_point(field_release:spaceart.PresentationToken.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PresentationToken::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:spaceart.PresentationToken.token)
}

// -------------------------------------------------------------------

// PresentationLine

// string line = 1;
inline void PresentationLine::clear_line() {
  line_.ClearToEmpty();
}
inline const std::string& PresentationLine::line() const {
  // @@protoc_insertion_point(field_get:spaceart.PresentationLine.line)
  return _internal_line();
}
inline void PresentationLine::set_line(const std::string& value) {
  _internal_set_line(value);
  // @@protoc_insertion_point(field_set:spaceart.PresentationLine.line)
}
inline std::string* PresentationLine::mutable_line() {
  // @@protoc_insertion_point(field_mutable:spaceart.PresentationLine.line)
  return _internal_mutable_line();
}
inline const std::string& PresentationLine::_internal_line() const {
  return line_.Get();
}
inline void PresentationLine::_internal_set_line(const std::string& value) {
  
  line_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PresentationLine::set_line(std::string&& value) {
  
  line_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:spaceart.PresentationLine.line)
}
inline void PresentationLine::set_line(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  line_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:spaceart.PresentationLine.line)
}
inline void PresentationLine::set_line(const char* value,
    size_t size) {
  
  line_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:spaceart.PresentationLine.line)
}
inline std::string* PresentationLine::_internal_mutable_line() {
  
  return line_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PresentationLine::release_line() {
  // @@protoc_insertion_point(field_release:spaceart.PresentationLine.line)
  return line_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PresentationLine::set_allocated_line(std::string* line) {
  if (line != nullptr) {
    
  } else {
    
  }
  line_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), line,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:spaceart.PresentationLine.line)
}

// -------------------------------------------------------------------

// CheckInResponse

// bool valid = 1;
inline void CheckInResponse::clear_valid() {
  valid_ = false;
}
inline bool CheckInResponse::_internal_valid() const {
  return valid_;
}
inline bool CheckInResponse::valid() const {
  // @@protoc_insertion_point(field_get:spaceart.CheckInResponse.valid)
  return _internal_valid();
}
inline void CheckInResponse::_internal_set_valid(bool value) {
  
  valid_ = value;
}
inline void CheckInResponse::set_valid(bool value) {
  _internal_set_valid(value);
  // @@protoc_insertion_point(field_set:spaceart.CheckInResponse.valid)
}

// bool wrong_password = 2;
inline bool CheckInResponse::_internal_has_wrong_password() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CheckInResponse::has_wrong_password() const {
  return _internal_has_wrong_password();
}
inline void CheckInResponse::clear_wrong_password() {
  wrong_password_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CheckInResponse::_internal_wrong_password() const {
  return wrong_password_;
}
inline bool CheckInResponse::wrong_password() const {
  // @@protoc_insertion_point(field_get:spaceart.CheckInResponse.wrong_password)
  return _internal_wrong_password();
}
inline void CheckInResponse::_internal_set_wrong_password(bool value) {
  _has_bits_[0] |= 0x00000002u;
  wrong_password_ = value;
}
inline void CheckInResponse::set_wrong_password(bool value) {
  _internal_set_wrong_password(value);
  // @@protoc_insertion_point(field_set:spaceart.CheckInResponse.wrong_password)
}

// bool new_password_desired = 3;
inline bool CheckInResponse::_internal_has_new_password_desired() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CheckInResponse::has_new_password_desired() const {
  return _internal_has_new_password_desired();
}
inline void CheckInResponse::clear_new_password_desired() {
  new_password_desired_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CheckInResponse::_internal_new_password_desired() const {
  return new_password_desired_;
}
inline bool CheckInResponse::new_password_desired() const {
  // @@protoc_insertion_point(field_get:spaceart.CheckInResponse.new_password_desired)
  return _internal_new_password_desired();
}
inline void CheckInResponse::_internal_set_new_password_desired(bool value) {
  _has_bits_[0] |= 0x00000004u;
  new_password_desired_ = value;
}
inline void CheckInResponse::set_new_password_desired(bool value) {
  _internal_set_new_password_desired(value);
  // @@protoc_insertion_point(field_set:spaceart.CheckInResponse.new_password_desired)
}

// string token = 4;
inline bool CheckInResponse::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CheckInResponse::has_token() const {
  return _internal_has_token();
}
inline void CheckInResponse::clear_token() {
  token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CheckInResponse::token() const {
  // @@protoc_insertion_point(field_get:spaceart.CheckInResponse.token)
  return _internal_token();
}
inline void CheckInResponse::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:spaceart.CheckInResponse.token)
}
inline std::string* CheckInResponse::mutable_token() {
  // @@protoc_insertion_point(field_mutable:spaceart.CheckInResponse.token)
  return _internal_mutable_token();
}
inline const std::string& CheckInResponse::_internal_token() const {
  return token_.Get();
}
inline void CheckInResponse::_internal_set_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CheckInResponse::set_token(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:spaceart.CheckInResponse.token)
}
inline void CheckInResponse::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:spaceart.CheckInResponse.token)
}
inline void CheckInResponse::set_token(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:spaceart.CheckInResponse.token)
}
inline std::string* CheckInResponse::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000001u;
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CheckInResponse::release_token() {
  // @@protoc_insertion_point(field_release:spaceart.CheckInResponse.token)
  if (!_internal_has_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CheckInResponse::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:spaceart.CheckInResponse.token)
}

// -------------------------------------------------------------------

// AuthResponse

// bool valid = 1;
inline void AuthResponse::clear_valid() {
  valid_ = false;
}
inline bool AuthResponse::_internal_valid() const {
  return valid_;
}
inline bool AuthResponse::valid() const {
  // @@protoc_insertion_point(field_get:spaceart.AuthResponse.valid)
  return _internal_valid();
}
inline void AuthResponse::_internal_set_valid(bool value) {
  
  valid_ = value;
}
inline void AuthResponse::set_valid(bool value) {
  _internal_set_valid(value);
  // @@protoc_insertion_point(field_set:spaceart.AuthResponse.valid)
}

// bool wrong_password = 2;
inline bool AuthResponse::_internal_has_wrong_password() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthResponse::has_wrong_password() const {
  return _internal_has_wrong_password();
}
inline void AuthResponse::clear_wrong_password() {
  wrong_password_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool AuthResponse::_internal_wrong_password() const {
  return wrong_password_;
}
inline bool AuthResponse::wrong_password() const {
  // @@protoc_insertion_point(field_get:spaceart.AuthResponse.wrong_password)
  return _internal_wrong_password();
}
inline void AuthResponse::_internal_set_wrong_password(bool value) {
  _has_bits_[0] |= 0x00000001u;
  wrong_password_ = value;
}
inline void AuthResponse::set_wrong_password(bool value) {
  _internal_set_wrong_password(value);
  // @@protoc_insertion_point(field_set:spaceart.AuthResponse.wrong_password)
}

// -------------------------------------------------------------------

// ArtRequest

// string name = 1;
inline void ArtRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ArtRequest::name() const {
  // @@protoc_insertion_point(field_get:spaceart.ArtRequest.name)
  return _internal_name();
}
inline void ArtRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:spaceart.ArtRequest.name)
}
inline std::string* ArtRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:spaceart.ArtRequest.name)
  return _internal_mutable_name();
}
inline const std::string& ArtRequest::_internal_name() const {
  return name_.Get();
}
inline void ArtRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ArtRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:spaceart.ArtRequest.name)
}
inline void ArtRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:spaceart.ArtRequest.name)
}
inline void ArtRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:spaceart.ArtRequest.name)
}
inline std::string* ArtRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ArtRequest::release_name() {
  // @@protoc_insertion_point(field_release:spaceart.ArtRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ArtRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:spaceart.ArtRequest.name)
}

// -------------------------------------------------------------------

// ArtLine

// string line = 1;
inline void ArtLine::clear_line() {
  line_.ClearToEmpty();
}
inline const std::string& ArtLine::line() const {
  // @@protoc_insertion_point(field_get:spaceart.ArtLine.line)
  return _internal_line();
}
inline void ArtLine::set_line(const std::string& value) {
  _internal_set_line(value);
  // @@protoc_insertion_point(field_set:spaceart.ArtLine.line)
}
inline std::string* ArtLine::mutable_line() {
  // @@protoc_insertion_point(field_mutable:spaceart.ArtLine.line)
  return _internal_mutable_line();
}
inline const std::string& ArtLine::_internal_line() const {
  return line_.Get();
}
inline void ArtLine::_internal_set_line(const std::string& value) {
  
  line_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ArtLine::set_line(std::string&& value) {
  
  line_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:spaceart.ArtLine.line)
}
inline void ArtLine::set_line(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  line_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:spaceart.ArtLine.line)
}
inline void ArtLine::set_line(const char* value,
    size_t size) {
  
  line_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:spaceart.ArtLine.line)
}
inline std::string* ArtLine::_internal_mutable_line() {
  
  return line_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ArtLine::release_line() {
  // @@protoc_insertion_point(field_release:spaceart.ArtLine.line)
  return line_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ArtLine::set_allocated_line(std::string* line) {
  if (line != nullptr) {
    
  } else {
    
  }
  line_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), line,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:spaceart.ArtLine.line)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace spaceart

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_spaceart_2eproto
