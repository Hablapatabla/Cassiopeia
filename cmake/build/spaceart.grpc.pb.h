// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: spaceart.proto
#ifndef GRPC_spaceart_2eproto__INCLUDED
#define GRPC_spaceart_2eproto__INCLUDED

#include "spaceart.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace spaceart {

class Presenter final {
 public:
  static constexpr char const* service_full_name() {
    return "spaceart.Presenter";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CheckIn(::grpc::ClientContext* context, const ::spaceart::Account& request, ::spaceart::CheckInResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spaceart::CheckInResponse>> AsyncCheckIn(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spaceart::CheckInResponse>>(AsyncCheckInRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spaceart::CheckInResponse>> PrepareAsyncCheckIn(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spaceart::CheckInResponse>>(PrepareAsyncCheckInRaw(context, request, cq));
    }
    virtual ::grpc::Status SubmitAccount(::grpc::ClientContext* context, const ::spaceart::Account& request, ::spaceart::CheckInResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spaceart::CheckInResponse>> AsyncSubmitAccount(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spaceart::CheckInResponse>>(AsyncSubmitAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spaceart::CheckInResponse>> PrepareAsyncSubmitAccount(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spaceart::CheckInResponse>>(PrepareAsyncSubmitAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::spaceart::PresentationLine>> Present(::grpc::ClientContext* context, const ::spaceart::PresentationToken& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::spaceart::PresentationLine>>(PresentRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::spaceart::PresentationLine>> AsyncPresent(::grpc::ClientContext* context, const ::spaceart::PresentationToken& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::spaceart::PresentationLine>>(AsyncPresentRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::spaceart::PresentationLine>> PrepareAsyncPresent(::grpc::ClientContext* context, const ::spaceart::PresentationToken& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::spaceart::PresentationLine>>(PrepareAsyncPresentRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void CheckIn(::grpc::ClientContext* context, const ::spaceart::Account* request, ::spaceart::CheckInResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CheckIn(::grpc::ClientContext* context, const ::spaceart::Account* request, ::spaceart::CheckInResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CheckIn(::grpc::ClientContext* context, const ::spaceart::Account* request, ::spaceart::CheckInResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SubmitAccount(::grpc::ClientContext* context, const ::spaceart::Account* request, ::spaceart::CheckInResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubmitAccount(::grpc::ClientContext* context, const ::spaceart::Account* request, ::spaceart::CheckInResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SubmitAccount(::grpc::ClientContext* context, const ::spaceart::Account* request, ::spaceart::CheckInResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Present(::grpc::ClientContext* context, ::spaceart::PresentationToken* request, ::grpc::ClientReadReactor< ::spaceart::PresentationLine>* reactor) = 0;
      #else
      virtual void Present(::grpc::ClientContext* context, ::spaceart::PresentationToken* request, ::grpc::experimental::ClientReadReactor< ::spaceart::PresentationLine>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spaceart::CheckInResponse>* AsyncCheckInRaw(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spaceart::CheckInResponse>* PrepareAsyncCheckInRaw(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spaceart::CheckInResponse>* AsyncSubmitAccountRaw(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spaceart::CheckInResponse>* PrepareAsyncSubmitAccountRaw(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::spaceart::PresentationLine>* PresentRaw(::grpc::ClientContext* context, const ::spaceart::PresentationToken& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::spaceart::PresentationLine>* AsyncPresentRaw(::grpc::ClientContext* context, const ::spaceart::PresentationToken& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::spaceart::PresentationLine>* PrepareAsyncPresentRaw(::grpc::ClientContext* context, const ::spaceart::PresentationToken& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CheckIn(::grpc::ClientContext* context, const ::spaceart::Account& request, ::spaceart::CheckInResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spaceart::CheckInResponse>> AsyncCheckIn(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spaceart::CheckInResponse>>(AsyncCheckInRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spaceart::CheckInResponse>> PrepareAsyncCheckIn(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spaceart::CheckInResponse>>(PrepareAsyncCheckInRaw(context, request, cq));
    }
    ::grpc::Status SubmitAccount(::grpc::ClientContext* context, const ::spaceart::Account& request, ::spaceart::CheckInResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spaceart::CheckInResponse>> AsyncSubmitAccount(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spaceart::CheckInResponse>>(AsyncSubmitAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spaceart::CheckInResponse>> PrepareAsyncSubmitAccount(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spaceart::CheckInResponse>>(PrepareAsyncSubmitAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::spaceart::PresentationLine>> Present(::grpc::ClientContext* context, const ::spaceart::PresentationToken& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::spaceart::PresentationLine>>(PresentRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::spaceart::PresentationLine>> AsyncPresent(::grpc::ClientContext* context, const ::spaceart::PresentationToken& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::spaceart::PresentationLine>>(AsyncPresentRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::spaceart::PresentationLine>> PrepareAsyncPresent(::grpc::ClientContext* context, const ::spaceart::PresentationToken& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::spaceart::PresentationLine>>(PrepareAsyncPresentRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CheckIn(::grpc::ClientContext* context, const ::spaceart::Account* request, ::spaceart::CheckInResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CheckIn(::grpc::ClientContext* context, const ::spaceart::Account* request, ::spaceart::CheckInResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CheckIn(::grpc::ClientContext* context, const ::spaceart::Account* request, ::spaceart::CheckInResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SubmitAccount(::grpc::ClientContext* context, const ::spaceart::Account* request, ::spaceart::CheckInResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubmitAccount(::grpc::ClientContext* context, const ::spaceart::Account* request, ::spaceart::CheckInResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SubmitAccount(::grpc::ClientContext* context, const ::spaceart::Account* request, ::spaceart::CheckInResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Present(::grpc::ClientContext* context, ::spaceart::PresentationToken* request, ::grpc::ClientReadReactor< ::spaceart::PresentationLine>* reactor) override;
      #else
      void Present(::grpc::ClientContext* context, ::spaceart::PresentationToken* request, ::grpc::experimental::ClientReadReactor< ::spaceart::PresentationLine>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::spaceart::CheckInResponse>* AsyncCheckInRaw(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::spaceart::CheckInResponse>* PrepareAsyncCheckInRaw(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::spaceart::CheckInResponse>* AsyncSubmitAccountRaw(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::spaceart::CheckInResponse>* PrepareAsyncSubmitAccountRaw(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::spaceart::PresentationLine>* PresentRaw(::grpc::ClientContext* context, const ::spaceart::PresentationToken& request) override;
    ::grpc::ClientAsyncReader< ::spaceart::PresentationLine>* AsyncPresentRaw(::grpc::ClientContext* context, const ::spaceart::PresentationToken& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::spaceart::PresentationLine>* PrepareAsyncPresentRaw(::grpc::ClientContext* context, const ::spaceart::PresentationToken& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CheckIn_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_Present_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CheckIn(::grpc::ServerContext* context, const ::spaceart::Account* request, ::spaceart::CheckInResponse* response);
    virtual ::grpc::Status SubmitAccount(::grpc::ServerContext* context, const ::spaceart::Account* request, ::spaceart::CheckInResponse* response);
    virtual ::grpc::Status Present(::grpc::ServerContext* context, const ::spaceart::PresentationToken* request, ::grpc::ServerWriter< ::spaceart::PresentationLine>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CheckIn() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CheckIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckIn(::grpc::ServerContext* /*context*/, const ::spaceart::Account* /*request*/, ::spaceart::CheckInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckIn(::grpc::ServerContext* context, ::spaceart::Account* request, ::grpc::ServerAsyncResponseWriter< ::spaceart::CheckInResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitAccount() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SubmitAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitAccount(::grpc::ServerContext* /*context*/, const ::spaceart::Account* /*request*/, ::spaceart::CheckInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitAccount(::grpc::ServerContext* context, ::spaceart::Account* request, ::grpc::ServerAsyncResponseWriter< ::spaceart::CheckInResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Present : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Present() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Present() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Present(::grpc::ServerContext* /*context*/, const ::spaceart::PresentationToken* /*request*/, ::grpc::ServerWriter< ::spaceart::PresentationLine>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPresent(::grpc::ServerContext* context, ::spaceart::PresentationToken* request, ::grpc::ServerAsyncWriter< ::spaceart::PresentationLine>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CheckIn<WithAsyncMethod_SubmitAccount<WithAsyncMethod_Present<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CheckIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CheckIn() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::spaceart::Account, ::spaceart::CheckInResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::spaceart::Account* request, ::spaceart::CheckInResponse* response) { return this->CheckIn(context, request, response); }));}
    void SetMessageAllocatorFor_CheckIn(
        ::grpc::experimental::MessageAllocator< ::spaceart::Account, ::spaceart::CheckInResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::spaceart::Account, ::spaceart::CheckInResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CheckIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckIn(::grpc::ServerContext* /*context*/, const ::spaceart::Account* /*request*/, ::spaceart::CheckInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CheckIn(
      ::grpc::CallbackServerContext* /*context*/, const ::spaceart::Account* /*request*/, ::spaceart::CheckInResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CheckIn(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::spaceart::Account* /*request*/, ::spaceart::CheckInResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubmitAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubmitAccount() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::spaceart::Account, ::spaceart::CheckInResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::spaceart::Account* request, ::spaceart::CheckInResponse* response) { return this->SubmitAccount(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitAccount(
        ::grpc::experimental::MessageAllocator< ::spaceart::Account, ::spaceart::CheckInResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::spaceart::Account, ::spaceart::CheckInResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SubmitAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitAccount(::grpc::ServerContext* /*context*/, const ::spaceart::Account* /*request*/, ::spaceart::CheckInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::spaceart::Account* /*request*/, ::spaceart::CheckInResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitAccount(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::spaceart::Account* /*request*/, ::spaceart::CheckInResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Present : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Present() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::spaceart::PresentationToken, ::spaceart::PresentationLine>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::spaceart::PresentationToken* request) { return this->Present(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_Present() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Present(::grpc::ServerContext* /*context*/, const ::spaceart::PresentationToken* /*request*/, ::grpc::ServerWriter< ::spaceart::PresentationLine>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::spaceart::PresentationLine>* Present(
      ::grpc::CallbackServerContext* /*context*/, const ::spaceart::PresentationToken* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::spaceart::PresentationLine>* Present(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::spaceart::PresentationToken* /*request*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_CheckIn<ExperimentalWithCallbackMethod_SubmitAccount<ExperimentalWithCallbackMethod_Present<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_CheckIn<ExperimentalWithCallbackMethod_SubmitAccount<ExperimentalWithCallbackMethod_Present<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CheckIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CheckIn() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CheckIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckIn(::grpc::ServerContext* /*context*/, const ::spaceart::Account* /*request*/, ::spaceart::CheckInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitAccount() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SubmitAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitAccount(::grpc::ServerContext* /*context*/, const ::spaceart::Account* /*request*/, ::spaceart::CheckInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Present : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Present() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Present() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Present(::grpc::ServerContext* /*context*/, const ::spaceart::PresentationToken* /*request*/, ::grpc::ServerWriter< ::spaceart::PresentationLine>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CheckIn() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CheckIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckIn(::grpc::ServerContext* /*context*/, const ::spaceart::Account* /*request*/, ::spaceart::CheckInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckIn(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitAccount() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SubmitAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitAccount(::grpc::ServerContext* /*context*/, const ::spaceart::Account* /*request*/, ::spaceart::CheckInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitAccount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Present : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Present() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Present() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Present(::grpc::ServerContext* /*context*/, const ::spaceart::PresentationToken* /*request*/, ::grpc::ServerWriter< ::spaceart::PresentationLine>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPresent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CheckIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CheckIn() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CheckIn(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CheckIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckIn(::grpc::ServerContext* /*context*/, const ::spaceart::Account* /*request*/, ::spaceart::CheckInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CheckIn(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CheckIn(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubmitAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubmitAccount() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitAccount(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubmitAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitAccount(::grpc::ServerContext* /*context*/, const ::spaceart::Account* /*request*/, ::spaceart::CheckInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitAccount(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Present : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Present() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->Present(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_Present() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Present(::grpc::ServerContext* /*context*/, const ::spaceart::PresentationToken* /*request*/, ::grpc::ServerWriter< ::spaceart::PresentationLine>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Present(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* Present(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CheckIn() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::spaceart::Account, ::spaceart::CheckInResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::spaceart::Account, ::spaceart::CheckInResponse>* streamer) {
                       return this->StreamedCheckIn(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CheckIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckIn(::grpc::ServerContext* /*context*/, const ::spaceart::Account* /*request*/, ::spaceart::CheckInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckIn(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::spaceart::Account,::spaceart::CheckInResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitAccount() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::spaceart::Account, ::spaceart::CheckInResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::spaceart::Account, ::spaceart::CheckInResponse>* streamer) {
                       return this->StreamedSubmitAccount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitAccount(::grpc::ServerContext* /*context*/, const ::spaceart::Account* /*request*/, ::spaceart::CheckInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::spaceart::Account,::spaceart::CheckInResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CheckIn<WithStreamedUnaryMethod_SubmitAccount<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Present : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Present() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::spaceart::PresentationToken, ::spaceart::PresentationLine>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::spaceart::PresentationToken, ::spaceart::PresentationLine>* streamer) {
                       return this->StreamedPresent(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Present() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Present(::grpc::ServerContext* /*context*/, const ::spaceart::PresentationToken* /*request*/, ::grpc::ServerWriter< ::spaceart::PresentationLine>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedPresent(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::spaceart::PresentationToken,::spaceart::PresentationLine>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Present<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_CheckIn<WithStreamedUnaryMethod_SubmitAccount<WithSplitStreamingMethod_Present<Service > > > StreamedService;
};

class Registrar final {
 public:
  static constexpr char const* service_full_name() {
    return "spaceart.Registrar";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Validate(::grpc::ClientContext* context, const ::spaceart::Account& request, ::spaceart::AuthResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spaceart::AuthResponse>> AsyncValidate(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spaceart::AuthResponse>>(AsyncValidateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spaceart::AuthResponse>> PrepareAsyncValidate(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spaceart::AuthResponse>>(PrepareAsyncValidateRaw(context, request, cq));
    }
    virtual ::grpc::Status Register(::grpc::ClientContext* context, const ::spaceart::Account& request, ::spaceart::AuthResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spaceart::AuthResponse>> AsyncRegister(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spaceart::AuthResponse>>(AsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spaceart::AuthResponse>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spaceart::AuthResponse>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Validate(::grpc::ClientContext* context, const ::spaceart::Account* request, ::spaceart::AuthResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Validate(::grpc::ClientContext* context, const ::spaceart::Account* request, ::spaceart::AuthResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Validate(::grpc::ClientContext* context, const ::spaceart::Account* request, ::spaceart::AuthResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Register(::grpc::ClientContext* context, const ::spaceart::Account* request, ::spaceart::AuthResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Register(::grpc::ClientContext* context, const ::spaceart::Account* request, ::spaceart::AuthResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Register(::grpc::ClientContext* context, const ::spaceart::Account* request, ::spaceart::AuthResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spaceart::AuthResponse>* AsyncValidateRaw(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spaceart::AuthResponse>* PrepareAsyncValidateRaw(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spaceart::AuthResponse>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spaceart::AuthResponse>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Validate(::grpc::ClientContext* context, const ::spaceart::Account& request, ::spaceart::AuthResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spaceart::AuthResponse>> AsyncValidate(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spaceart::AuthResponse>>(AsyncValidateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spaceart::AuthResponse>> PrepareAsyncValidate(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spaceart::AuthResponse>>(PrepareAsyncValidateRaw(context, request, cq));
    }
    ::grpc::Status Register(::grpc::ClientContext* context, const ::spaceart::Account& request, ::spaceart::AuthResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spaceart::AuthResponse>> AsyncRegister(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spaceart::AuthResponse>>(AsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spaceart::AuthResponse>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spaceart::AuthResponse>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Validate(::grpc::ClientContext* context, const ::spaceart::Account* request, ::spaceart::AuthResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Validate(::grpc::ClientContext* context, const ::spaceart::Account* request, ::spaceart::AuthResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Validate(::grpc::ClientContext* context, const ::spaceart::Account* request, ::spaceart::AuthResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Register(::grpc::ClientContext* context, const ::spaceart::Account* request, ::spaceart::AuthResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Register(::grpc::ClientContext* context, const ::spaceart::Account* request, ::spaceart::AuthResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Register(::grpc::ClientContext* context, const ::spaceart::Account* request, ::spaceart::AuthResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::spaceart::AuthResponse>* AsyncValidateRaw(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::spaceart::AuthResponse>* PrepareAsyncValidateRaw(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::spaceart::AuthResponse>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::spaceart::AuthResponse>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Validate_;
    const ::grpc::internal::RpcMethod rpcmethod_Register_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Validate(::grpc::ServerContext* context, const ::spaceart::Account* request, ::spaceart::AuthResponse* response);
    virtual ::grpc::Status Register(::grpc::ServerContext* context, const ::spaceart::Account* request, ::spaceart::AuthResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Validate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Validate() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Validate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Validate(::grpc::ServerContext* /*context*/, const ::spaceart::Account* /*request*/, ::spaceart::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidate(::grpc::ServerContext* context, ::spaceart::Account* request, ::grpc::ServerAsyncResponseWriter< ::spaceart::AuthResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Register() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::spaceart::Account* /*request*/, ::spaceart::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::spaceart::Account* request, ::grpc::ServerAsyncResponseWriter< ::spaceart::AuthResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Validate<WithAsyncMethod_Register<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Validate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Validate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::spaceart::Account, ::spaceart::AuthResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::spaceart::Account* request, ::spaceart::AuthResponse* response) { return this->Validate(context, request, response); }));}
    void SetMessageAllocatorFor_Validate(
        ::grpc::experimental::MessageAllocator< ::spaceart::Account, ::spaceart::AuthResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::spaceart::Account, ::spaceart::AuthResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Validate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Validate(::grpc::ServerContext* /*context*/, const ::spaceart::Account* /*request*/, ::spaceart::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Validate(
      ::grpc::CallbackServerContext* /*context*/, const ::spaceart::Account* /*request*/, ::spaceart::AuthResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Validate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::spaceart::Account* /*request*/, ::spaceart::AuthResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Register() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::spaceart::Account, ::spaceart::AuthResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::spaceart::Account* request, ::spaceart::AuthResponse* response) { return this->Register(context, request, response); }));}
    void SetMessageAllocatorFor_Register(
        ::grpc::experimental::MessageAllocator< ::spaceart::Account, ::spaceart::AuthResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::spaceart::Account, ::spaceart::AuthResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::spaceart::Account* /*request*/, ::spaceart::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Register(
      ::grpc::CallbackServerContext* /*context*/, const ::spaceart::Account* /*request*/, ::spaceart::AuthResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Register(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::spaceart::Account* /*request*/, ::spaceart::AuthResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Validate<ExperimentalWithCallbackMethod_Register<Service > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Validate<ExperimentalWithCallbackMethod_Register<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Validate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Validate() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Validate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Validate(::grpc::ServerContext* /*context*/, const ::spaceart::Account* /*request*/, ::spaceart::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Register() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::spaceart::Account* /*request*/, ::spaceart::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Validate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Validate() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Validate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Validate(::grpc::ServerContext* /*context*/, const ::spaceart::Account* /*request*/, ::spaceart::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Register() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::spaceart::Account* /*request*/, ::spaceart::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Validate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Validate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Validate(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Validate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Validate(::grpc::ServerContext* /*context*/, const ::spaceart::Account* /*request*/, ::spaceart::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Validate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Validate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Register() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Register(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::spaceart::Account* /*request*/, ::spaceart::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Register(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Register(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Validate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Validate() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::spaceart::Account, ::spaceart::AuthResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::spaceart::Account, ::spaceart::AuthResponse>* streamer) {
                       return this->StreamedValidate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Validate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Validate(::grpc::ServerContext* /*context*/, const ::spaceart::Account* /*request*/, ::spaceart::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValidate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::spaceart::Account,::spaceart::AuthResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Register() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::spaceart::Account, ::spaceart::AuthResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::spaceart::Account, ::spaceart::AuthResponse>* streamer) {
                       return this->StreamedRegister(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::spaceart::Account* /*request*/, ::spaceart::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::spaceart::Account,::spaceart::AuthResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Validate<WithStreamedUnaryMethod_Register<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Validate<WithStreamedUnaryMethod_Register<Service > > StreamedService;
};

class Gallery final {
 public:
  static constexpr char const* service_full_name() {
    return "spaceart.Gallery";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::spaceart::ArtLine>> GetArt(::grpc::ClientContext* context, const ::spaceart::ArtRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::spaceart::ArtLine>>(GetArtRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::spaceart::ArtLine>> AsyncGetArt(::grpc::ClientContext* context, const ::spaceart::ArtRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::spaceart::ArtLine>>(AsyncGetArtRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::spaceart::ArtLine>> PrepareAsyncGetArt(::grpc::ClientContext* context, const ::spaceart::ArtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::spaceart::ArtLine>>(PrepareAsyncGetArtRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetArt(::grpc::ClientContext* context, ::spaceart::ArtRequest* request, ::grpc::ClientReadReactor< ::spaceart::ArtLine>* reactor) = 0;
      #else
      virtual void GetArt(::grpc::ClientContext* context, ::spaceart::ArtRequest* request, ::grpc::experimental::ClientReadReactor< ::spaceart::ArtLine>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::spaceart::ArtLine>* GetArtRaw(::grpc::ClientContext* context, const ::spaceart::ArtRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::spaceart::ArtLine>* AsyncGetArtRaw(::grpc::ClientContext* context, const ::spaceart::ArtRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::spaceart::ArtLine>* PrepareAsyncGetArtRaw(::grpc::ClientContext* context, const ::spaceart::ArtRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::spaceart::ArtLine>> GetArt(::grpc::ClientContext* context, const ::spaceart::ArtRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::spaceart::ArtLine>>(GetArtRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::spaceart::ArtLine>> AsyncGetArt(::grpc::ClientContext* context, const ::spaceart::ArtRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::spaceart::ArtLine>>(AsyncGetArtRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::spaceart::ArtLine>> PrepareAsyncGetArt(::grpc::ClientContext* context, const ::spaceart::ArtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::spaceart::ArtLine>>(PrepareAsyncGetArtRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetArt(::grpc::ClientContext* context, ::spaceart::ArtRequest* request, ::grpc::ClientReadReactor< ::spaceart::ArtLine>* reactor) override;
      #else
      void GetArt(::grpc::ClientContext* context, ::spaceart::ArtRequest* request, ::grpc::experimental::ClientReadReactor< ::spaceart::ArtLine>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::spaceart::ArtLine>* GetArtRaw(::grpc::ClientContext* context, const ::spaceart::ArtRequest& request) override;
    ::grpc::ClientAsyncReader< ::spaceart::ArtLine>* AsyncGetArtRaw(::grpc::ClientContext* context, const ::spaceart::ArtRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::spaceart::ArtLine>* PrepareAsyncGetArtRaw(::grpc::ClientContext* context, const ::spaceart::ArtRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetArt_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetArt(::grpc::ServerContext* context, const ::spaceart::ArtRequest* request, ::grpc::ServerWriter< ::spaceart::ArtLine>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetArt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetArt() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetArt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArt(::grpc::ServerContext* /*context*/, const ::spaceart::ArtRequest* /*request*/, ::grpc::ServerWriter< ::spaceart::ArtLine>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArt(::grpc::ServerContext* context, ::spaceart::ArtRequest* request, ::grpc::ServerAsyncWriter< ::spaceart::ArtLine>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetArt<Service > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetArt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetArt() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::spaceart::ArtRequest, ::spaceart::ArtLine>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::spaceart::ArtRequest* request) { return this->GetArt(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetArt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArt(::grpc::ServerContext* /*context*/, const ::spaceart::ArtRequest* /*request*/, ::grpc::ServerWriter< ::spaceart::ArtLine>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::spaceart::ArtLine>* GetArt(
      ::grpc::CallbackServerContext* /*context*/, const ::spaceart::ArtRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::spaceart::ArtLine>* GetArt(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::spaceart::ArtRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetArt<Service > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetArt<Service > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetArt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetArt() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetArt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArt(::grpc::ServerContext* /*context*/, const ::spaceart::ArtRequest* /*request*/, ::grpc::ServerWriter< ::spaceart::ArtLine>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetArt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetArt() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetArt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArt(::grpc::ServerContext* /*context*/, const ::spaceart::ArtRequest* /*request*/, ::grpc::ServerWriter< ::spaceart::ArtLine>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArt(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetArt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetArt() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetArt(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetArt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArt(::grpc::ServerContext* /*context*/, const ::spaceart::ArtRequest* /*request*/, ::grpc::ServerWriter< ::spaceart::ArtLine>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetArt(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetArt(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetArt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetArt() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::spaceart::ArtRequest, ::spaceart::ArtLine>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::spaceart::ArtRequest, ::spaceart::ArtLine>* streamer) {
                       return this->StreamedGetArt(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetArt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetArt(::grpc::ServerContext* /*context*/, const ::spaceart::ArtRequest* /*request*/, ::grpc::ServerWriter< ::spaceart::ArtLine>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetArt(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::spaceart::ArtRequest,::spaceart::ArtLine>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetArt<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_GetArt<Service > StreamedService;
};

}  // namespace spaceart


#endif  // GRPC_spaceart_2eproto__INCLUDED
