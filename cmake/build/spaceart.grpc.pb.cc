// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: spaceart.proto

#include "spaceart.pb.h"
#include "spaceart.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace spaceart {

static const char* Presenter_method_names[] = {
  "/spaceart.Presenter/CheckIn",
  "/spaceart.Presenter/SubmitAccount",
  "/spaceart.Presenter/Present",
};

std::unique_ptr< Presenter::Stub> Presenter::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Presenter::Stub> stub(new Presenter::Stub(channel));
  return stub;
}

Presenter::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CheckIn_(Presenter_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitAccount_(Presenter_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Present_(Presenter_method_names[2], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status Presenter::Stub::CheckIn(::grpc::ClientContext* context, const ::spaceart::Account& request, ::spaceart::CheckInResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::spaceart::Account, ::spaceart::CheckInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckIn_, context, request, response);
}

void Presenter::Stub::experimental_async::CheckIn(::grpc::ClientContext* context, const ::spaceart::Account* request, ::spaceart::CheckInResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::spaceart::Account, ::spaceart::CheckInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckIn_, context, request, response, std::move(f));
}

void Presenter::Stub::experimental_async::CheckIn(::grpc::ClientContext* context, const ::spaceart::Account* request, ::spaceart::CheckInResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckIn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::spaceart::CheckInResponse>* Presenter::Stub::PrepareAsyncCheckInRaw(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::spaceart::CheckInResponse, ::spaceart::Account, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckIn_, context, request);
}

::grpc::ClientAsyncResponseReader< ::spaceart::CheckInResponse>* Presenter::Stub::AsyncCheckInRaw(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckInRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Presenter::Stub::SubmitAccount(::grpc::ClientContext* context, const ::spaceart::Account& request, ::spaceart::CheckInResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::spaceart::Account, ::spaceart::CheckInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitAccount_, context, request, response);
}

void Presenter::Stub::experimental_async::SubmitAccount(::grpc::ClientContext* context, const ::spaceart::Account* request, ::spaceart::CheckInResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::spaceart::Account, ::spaceart::CheckInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitAccount_, context, request, response, std::move(f));
}

void Presenter::Stub::experimental_async::SubmitAccount(::grpc::ClientContext* context, const ::spaceart::Account* request, ::spaceart::CheckInResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::spaceart::CheckInResponse>* Presenter::Stub::PrepareAsyncSubmitAccountRaw(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::spaceart::CheckInResponse, ::spaceart::Account, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubmitAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::spaceart::CheckInResponse>* Presenter::Stub::AsyncSubmitAccountRaw(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::spaceart::PresentationLine>* Presenter::Stub::PresentRaw(::grpc::ClientContext* context, const ::spaceart::PresentationToken& request) {
  return ::grpc::internal::ClientReaderFactory< ::spaceart::PresentationLine>::Create(channel_.get(), rpcmethod_Present_, context, request);
}

void Presenter::Stub::experimental_async::Present(::grpc::ClientContext* context, ::spaceart::PresentationToken* request, ::grpc::experimental::ClientReadReactor< ::spaceart::PresentationLine>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::spaceart::PresentationLine>::Create(stub_->channel_.get(), stub_->rpcmethod_Present_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::spaceart::PresentationLine>* Presenter::Stub::AsyncPresentRaw(::grpc::ClientContext* context, const ::spaceart::PresentationToken& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::spaceart::PresentationLine>::Create(channel_.get(), cq, rpcmethod_Present_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::spaceart::PresentationLine>* Presenter::Stub::PrepareAsyncPresentRaw(::grpc::ClientContext* context, const ::spaceart::PresentationToken& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::spaceart::PresentationLine>::Create(channel_.get(), cq, rpcmethod_Present_, context, request, false, nullptr);
}

Presenter::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Presenter_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Presenter::Service, ::spaceart::Account, ::spaceart::CheckInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Presenter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::spaceart::Account* req,
             ::spaceart::CheckInResponse* resp) {
               return service->CheckIn(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Presenter_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Presenter::Service, ::spaceart::Account, ::spaceart::CheckInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Presenter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::spaceart::Account* req,
             ::spaceart::CheckInResponse* resp) {
               return service->SubmitAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Presenter_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Presenter::Service, ::spaceart::PresentationToken, ::spaceart::PresentationLine>(
          [](Presenter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::spaceart::PresentationToken* req,
             ::grpc::ServerWriter<::spaceart::PresentationLine>* writer) {
               return service->Present(ctx, req, writer);
             }, this)));
}

Presenter::Service::~Service() {
}

::grpc::Status Presenter::Service::CheckIn(::grpc::ServerContext* context, const ::spaceart::Account* request, ::spaceart::CheckInResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Presenter::Service::SubmitAccount(::grpc::ServerContext* context, const ::spaceart::Account* request, ::spaceart::CheckInResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Presenter::Service::Present(::grpc::ServerContext* context, const ::spaceart::PresentationToken* request, ::grpc::ServerWriter< ::spaceart::PresentationLine>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Registrar_method_names[] = {
  "/spaceart.Registrar/Validate",
  "/spaceart.Registrar/Register",
};

std::unique_ptr< Registrar::Stub> Registrar::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Registrar::Stub> stub(new Registrar::Stub(channel));
  return stub;
}

Registrar::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Validate_(Registrar_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Register_(Registrar_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Registrar::Stub::Validate(::grpc::ClientContext* context, const ::spaceart::Account& request, ::spaceart::AuthResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::spaceart::Account, ::spaceart::AuthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Validate_, context, request, response);
}

void Registrar::Stub::experimental_async::Validate(::grpc::ClientContext* context, const ::spaceart::Account* request, ::spaceart::AuthResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::spaceart::Account, ::spaceart::AuthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Validate_, context, request, response, std::move(f));
}

void Registrar::Stub::experimental_async::Validate(::grpc::ClientContext* context, const ::spaceart::Account* request, ::spaceart::AuthResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Validate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::spaceart::AuthResponse>* Registrar::Stub::PrepareAsyncValidateRaw(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::spaceart::AuthResponse, ::spaceart::Account, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Validate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::spaceart::AuthResponse>* Registrar::Stub::AsyncValidateRaw(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncValidateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Registrar::Stub::Register(::grpc::ClientContext* context, const ::spaceart::Account& request, ::spaceart::AuthResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::spaceart::Account, ::spaceart::AuthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Register_, context, request, response);
}

void Registrar::Stub::experimental_async::Register(::grpc::ClientContext* context, const ::spaceart::Account* request, ::spaceart::AuthResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::spaceart::Account, ::spaceart::AuthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, std::move(f));
}

void Registrar::Stub::experimental_async::Register(::grpc::ClientContext* context, const ::spaceart::Account* request, ::spaceart::AuthResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::spaceart::AuthResponse>* Registrar::Stub::PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::spaceart::AuthResponse, ::spaceart::Account, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Register_, context, request);
}

::grpc::ClientAsyncResponseReader< ::spaceart::AuthResponse>* Registrar::Stub::AsyncRegisterRaw(::grpc::ClientContext* context, const ::spaceart::Account& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterRaw(context, request, cq);
  result->StartCall();
  return result;
}

Registrar::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Registrar_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Registrar::Service, ::spaceart::Account, ::spaceart::AuthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Registrar::Service* service,
             ::grpc::ServerContext* ctx,
             const ::spaceart::Account* req,
             ::spaceart::AuthResponse* resp) {
               return service->Validate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Registrar_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Registrar::Service, ::spaceart::Account, ::spaceart::AuthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Registrar::Service* service,
             ::grpc::ServerContext* ctx,
             const ::spaceart::Account* req,
             ::spaceart::AuthResponse* resp) {
               return service->Register(ctx, req, resp);
             }, this)));
}

Registrar::Service::~Service() {
}

::grpc::Status Registrar::Service::Validate(::grpc::ServerContext* context, const ::spaceart::Account* request, ::spaceart::AuthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Registrar::Service::Register(::grpc::ServerContext* context, const ::spaceart::Account* request, ::spaceart::AuthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Gallery_method_names[] = {
  "/spaceart.Gallery/GetArt",
};

std::unique_ptr< Gallery::Stub> Gallery::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Gallery::Stub> stub(new Gallery::Stub(channel));
  return stub;
}

Gallery::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetArt_(Gallery_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::spaceart::ArtLine>* Gallery::Stub::GetArtRaw(::grpc::ClientContext* context, const ::spaceart::ArtRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::spaceart::ArtLine>::Create(channel_.get(), rpcmethod_GetArt_, context, request);
}

void Gallery::Stub::experimental_async::GetArt(::grpc::ClientContext* context, ::spaceart::ArtRequest* request, ::grpc::experimental::ClientReadReactor< ::spaceart::ArtLine>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::spaceart::ArtLine>::Create(stub_->channel_.get(), stub_->rpcmethod_GetArt_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::spaceart::ArtLine>* Gallery::Stub::AsyncGetArtRaw(::grpc::ClientContext* context, const ::spaceart::ArtRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::spaceart::ArtLine>::Create(channel_.get(), cq, rpcmethod_GetArt_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::spaceart::ArtLine>* Gallery::Stub::PrepareAsyncGetArtRaw(::grpc::ClientContext* context, const ::spaceart::ArtRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::spaceart::ArtLine>::Create(channel_.get(), cq, rpcmethod_GetArt_, context, request, false, nullptr);
}

Gallery::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Gallery_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Gallery::Service, ::spaceart::ArtRequest, ::spaceart::ArtLine>(
          [](Gallery::Service* service,
             ::grpc::ServerContext* ctx,
             const ::spaceart::ArtRequest* req,
             ::grpc::ServerWriter<::spaceart::ArtLine>* writer) {
               return service->GetArt(ctx, req, writer);
             }, this)));
}

Gallery::Service::~Service() {
}

::grpc::Status Gallery::Service::GetArt(::grpc::ServerContext* context, const ::spaceart::ArtRequest* request, ::grpc::ServerWriter< ::spaceart::ArtLine>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace spaceart

