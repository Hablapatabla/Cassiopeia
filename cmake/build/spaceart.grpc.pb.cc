// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: spaceart.proto

#include "spaceart.pb.h"
#include "spaceart.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace spaceart {

static const char* SpaceArt_method_names[] = {
  "/spaceart.SpaceArt/DisplayArt",
};

std::unique_ptr< SpaceArt::Stub> SpaceArt::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SpaceArt::Stub> stub(new SpaceArt::Stub(channel));
  return stub;
}

SpaceArt::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_DisplayArt_(SpaceArt_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::spaceart::ArtLine>* SpaceArt::Stub::DisplayArtRaw(::grpc::ClientContext* context, const ::spaceart::ArtRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::spaceart::ArtLine>::Create(channel_.get(), rpcmethod_DisplayArt_, context, request);
}

void SpaceArt::Stub::experimental_async::DisplayArt(::grpc::ClientContext* context, ::spaceart::ArtRequest* request, ::grpc::experimental::ClientReadReactor< ::spaceart::ArtLine>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::spaceart::ArtLine>::Create(stub_->channel_.get(), stub_->rpcmethod_DisplayArt_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::spaceart::ArtLine>* SpaceArt::Stub::AsyncDisplayArtRaw(::grpc::ClientContext* context, const ::spaceart::ArtRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::spaceart::ArtLine>::Create(channel_.get(), cq, rpcmethod_DisplayArt_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::spaceart::ArtLine>* SpaceArt::Stub::PrepareAsyncDisplayArtRaw(::grpc::ClientContext* context, const ::spaceart::ArtRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::spaceart::ArtLine>::Create(channel_.get(), cq, rpcmethod_DisplayArt_, context, request, false, nullptr);
}

SpaceArt::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpaceArt_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SpaceArt::Service, ::spaceart::ArtRequest, ::spaceart::ArtLine>(
          [](SpaceArt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::spaceart::ArtRequest* req,
             ::grpc::ServerWriter<::spaceart::ArtLine>* writer) {
               return service->DisplayArt(ctx, req, writer);
             }, this)));
}

SpaceArt::Service::~Service() {
}

::grpc::Status SpaceArt::Service::DisplayArt(::grpc::ServerContext* context, const ::spaceart::ArtRequest* request, ::grpc::ServerWriter< ::spaceart::ArtLine>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace spaceart

